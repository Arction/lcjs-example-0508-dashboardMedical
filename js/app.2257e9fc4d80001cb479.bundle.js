(self.webpackChunk=self.webpackChunk||[]).push([[524],{44:(e,t,a)=>{const o=a(377),{AxisScrollStrategies:s,AxisTickStrategies:n,AutoCursorModes:r,emptyFill:l,SolidFill:i,emptyLine:d,lightningChart:m,UIOrigins:c,UIElementBuilders:h,UILayoutBuilders:x,Themes:g}=o;fetch(new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"examples/assets/0508/medical-data.json").then((e=>e.json())).then((e=>{const{ecg:t,bloodPressure:a,bloodVolume:o,bloodOxygenation:r}=e,u=[{shortName:"ECG/EKG",name:"Electrocardiogram",dataSet:t},{shortName:"NIBP",name:"Blood pressure",dataSet:a},{shortName:"BFV",name:"Blood flow volume",dataSet:o},{shortName:"Sp02",name:"Blood oxygen saturation",dataSet:r}],S=m({resourcesBaseUrl:new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"resources/"}).ChartXY({theme:g[new URLSearchParams(window.location.search).get("theme")||"darkGold"]||void 0}).setTitle("Medical Dashboard").setPadding({right:140}).setCursor((e=>e.setTickMarkerYVisible(!1).setGridStrokeYStyle(d)));S.getDefaultAxisY().dispose();const p=[S.addAxisY({iStack:3}).setLength({relative:.4}),S.addAxisY({iStack:2}).setLength({relative:.3}),S.addAxisY({iStack:1}).setLength({relative:.2}),S.addAxisY({iStack:0}).setLength({relative:.2})],w=S.getTheme(),T=(S.getDefaultAxisX().setTickStrategy(n.Time).setDefaultInterval((e=>({end:e.dataMax,start:(e.dataMax??0)-1e4,stopAxisAfter:!1}))).setScrollStrategy(s.progressive),u.map(((e,t)=>{const a=p[t].setTickStrategy(n.Empty).setStrokeStyle(d).setAnimationScroll(!1),o=S.addPointLineAreaSeries({dataPattern:"ProgressiveX",automaticColorIndex:Math.max(t-1,0),yAxis:a}).setAreaFillStyle(l).setName(e.name).setMaxSampleCount(5e4);return"Electrocardiogram"===e.name&&o.setStrokeStyle((e=>e.setFillStyle(new i({color:w.examples.badGoodColorPalette[w.examples.badGoodColorPalette.length-1]})))),{axisY:a,series:o}}))),y=T.map(((e,t)=>{const a=e.axisY,o=u[t],s=S.addUIElement(x.Column,S.coordsRelative).setBackground((e=>e.setFillStyle(l).setStrokeStyle(d))).setPointerEvents(!1);s.addElement(h.TextBox).setText(o.shortName),s.addElement(h.TextBox).setText(o.name).setTextFont((e=>e.setSize(10)));const n=s.addElement(h.TextBox).setText("").setTextFont((e=>e.setSize(10)));let r;return"Electrocardiogram"===o.name&&(s.addElement(h.TextBox).setMargin({top:10}).setText("BPM"),r=s.addElement(h.TextBox).setText("").setTextFont((e=>e.setSize(36)))),S.addEventListener("layoutchange",(e=>{s.setOrigin(c.LeftTop).setPosition({x:e.margins.left+e.viewportWidth,y:e.axes.get(a).bottom+e.axes.get(a).height})})),{labelSampleRate:n,labelBpmValue:r}}));let b=window.performance.now(),f=0;const k=()=>{const e=window.performance.now(),t=T.map((e=>[]));for(;e>b;){const e=b;for(let a=0;a<T.length;a+=1){const o=u[a],s=o.dataSet,n=s[f%s.length];t[a].push({x:e,y:n}),"Electrocardiogram"===o.name&&L(n)}b+=1,f+=1}T.forEach(((e,a)=>e.series.add(t[a]))),B+=t[0].length,requestAnimationFrame(k)};requestAnimationFrame(k);let B=0,E=window.performance.now();setInterval((()=>{const e=window.performance.now(),t=Math.round(1e3*B/(e-E)),a=60*v*1e3/(e-A);y.forEach(((e,o)=>{e.labelSampleRate.setText(`${t} samples / second`),e.labelBpmValue&&e.labelBpmValue.setText(`${Math.round(a)}`)})),B=0,E=e}),2e3);let A=window.performance.now(),v=0;const L=(()=>{let e=0;return t=>{e<800&&t>800&&(v+=1),e=t}})()}))}},e=>{e.O(0,[502],(()=>e(e.s=44))),e.O()}]);