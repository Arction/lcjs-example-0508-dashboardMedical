(self.webpackChunk=self.webpackChunk||[]).push([[524],{44:(e,t,a)=>{const s=a(377),{AxisScrollStrategies:o,AxisTickStrategies:n,AutoCursorModes:r,emptyFill:l,SolidFill:i,emptyLine:d,lightningChart:m,UIOrigins:c,UIElementBuilders:x,UILayoutBuilders:h,Themes:u}=s;fetch(new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"examples/assets/0508/medical-data.json").then((e=>e.json())).then((e=>{const{ecg:t,bloodPressure:a,bloodVolume:s,bloodOxygenation:r}=e,g=[{shortName:"ECG/EKG",name:"Electrocardiogram",dataSet:t},{shortName:"NIBP",name:"Blood pressure",dataSet:a},{shortName:"BFV",name:"Blood flow volume",dataSet:s},{shortName:"Sp02",name:"Blood oxygen saturation",dataSet:r}],S=m({resourcesBaseUrl:new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"resources/"}).ChartXY({theme:u[new URLSearchParams(window.location.search).get("theme")||"darkGold"]||void 0}).setTitle("Medical Dashboard").setMouseInteractions(!1).setPadding({right:140}).setCursor((e=>e.setTickMarkerYVisible(!1).setGridStrokeYStyle(d)));S.getDefaultAxisY().dispose();const p=[S.addAxisY({iStack:3}).setLength({relative:.4}),S.addAxisY({iStack:2}).setLength({relative:.3}),S.addAxisY({iStack:1}).setLength({relative:.2}),S.addAxisY({iStack:0}).setLength({relative:.2})],w=S.getTheme(),T=S.getDefaultAxisX().setTickStrategy(n.Time).setDefaultInterval((e=>({end:e.dataMax,start:(e.dataMax??0)-1e4,stopAxisAfter:!1}))).setScrollStrategy(o.progressive),b=g.map(((e,t)=>{const a=p[t].setMouseInteractions(!1).setTickStrategy(n.Empty).setStrokeStyle(d).setAnimationScroll(!1),s=S.addPointLineAreaSeries({dataPattern:"ProgressiveX",automaticColorIndex:Math.max(t-1,0),yAxis:a}).setAreaFillStyle(l).setName(e.name).setMaxSampleCount(5e4);return"Electrocardiogram"===e.name&&s.setStrokeStyle((e=>e.setFillStyle(new i({color:w.examples.badGoodColorPalette[w.examples.badGoodColorPalette.length-1]})))),{axisY:a,series:s}})),y=b.map(((e,t)=>{const a=e.axisY,s=g[t],o=S.addUIElement(h.Column,S.coordsRelative).setBackground((e=>e.setFillStyle(l).setStrokeStyle(d))).setMouseInteractions(!1).setVisible(!1);o.addElement(x.TextBox).setText(s.shortName),o.addElement(x.TextBox).setText(s.name).setTextFont((e=>e.setSize(10)));const n=o.addElement(x.TextBox).setText("").setTextFont((e=>e.setSize(10)));let r;"Electrocardiogram"===s.name&&(o.addElement(x.TextBox).setMargin({top:10}).setText("BPM"),r=o.addElement(x.TextBox).setText("").setTextFont((e=>e.setSize(36))));const i=()=>{o.setVisible(!0).setPosition(S.translateCoordinate({x:T.getInterval().end,y:a.getInterval().end},{x:T,y:a},S.coordsRelative)).setOrigin(c.LeftTop).setMargin({left:10})};return S.onResize(i),requestAnimationFrame(i),{labelSampleRate:n,labelBpmValue:r}}));let f=window.performance.now(),k=0;const A=()=>{const e=window.performance.now(),t=b.map((e=>[]));for(;e>f;){const e=f;for(let a=0;a<b.length;a+=1){const s=g[a],o=s.dataSet,n=o[k%o.length];t[a].push({x:e,y:n}),"Electrocardiogram"===s.name&&v(n)}f+=1,k+=1}b.forEach(((e,a)=>e.series.add(t[a]))),B+=t[0].length,requestAnimationFrame(A)};requestAnimationFrame(A);let B=0,I=window.performance.now();setInterval((()=>{const e=window.performance.now(),t=Math.round(1e3*B/(e-I)),a=60*M*1e3/(e-E);y.forEach(((e,s)=>{e.labelSampleRate.setText(`${t} samples / second`),e.labelBpmValue&&e.labelBpmValue.setText(`${Math.round(a)}`)})),B=0,I=e}),2e3);let E=window.performance.now(),M=0;const v=(()=>{let e=0;return t=>{e<800&&t>800&&(M+=1),e=t}})()}))}},e=>{e.O(0,[502],(()=>e(e.s=44))),e.O()}]);