(self.webpackChunk=self.webpackChunk||[]).push([[143],{138:(e,t,a)=>{const o=a(475),{AxisScrollStrategies:s,AxisTickStrategies:n,AutoCursorModes:l,emptyFill:r,SolidFill:i,emptyLine:d,lightningChart:m,synchronizeAxisIntervals:c,UIOrigins:g,UIElementBuilders:u,UILayoutBuilders:S,Themes:x}=o;fetch(document.head.baseURI+"examples/assets/0508/medical-data.json").then((e=>e.json())).then((e=>{const{ecg:t,bloodPressure:a,bloodVolume:o,bloodOxygenation:x}=e,h=[{shortName:"ECG/EKG",name:"Electrocardiogram",dataSet:t,yStart:-1955,yEnd:1195},{shortName:"NIBP",name:"Blood pressure",dataSet:a,yStart:.475,yEnd:.795},{shortName:"BFV",name:"Blood flow volume",dataSet:o,yStart:.155,yEnd:.445},{shortName:"Sp02",name:"Blood oxygen saturation",dataSet:x,yStart:.015,yEnd:.155}],y=m().Dashboard({numberOfRows:h.length,numberOfColumns:1}).setRowHeight(0,.4).setRowHeight(1,.3).setRowHeight(2,.2).setRowHeight(3,.2),p=y.getTheme(),T=h.map(((e,t)=>{const a=y.createChartXY({rowIndex:t,columnIndex:0}).setPadding({bottom:4,top:4,right:200,left:10}).setMouseInteractions(!1).setAutoCursorMode(l.disabled),o=a.getDefaultAxisX().setMouseInteractions(!1);return a.getDefaultAxisY().setMouseInteractions(!1).setInterval({start:e.yStart,end:e.yEnd}).setTickStrategy(n.Empty).setStrokeStyle(d),t>0?a.setTitleFillStyle(r):a.setTitle("Medical Dashboard"),t<h.length-1?o.setTickStrategy(n.Time,(e=>e.setMajorTickStyle((e=>e.setLabelFillStyle(r).setTickStyle(d).setTickLength(0).setTickPadding(0))).setMinorTickStyle((e=>e.setLabelFillStyle(r).setTickStyle(d).setTickLength(0).setTickPadding(0))))).setStrokeStyle(d).setScrollStrategy(void 0):o.setTickStrategy(n.Time).setInterval({start:-1e4,end:0,stopAxisAfter:!1}).setScrollStrategy(s.progressive),a})),w=T.map(((e,t)=>{const a=e.getDefaultAxisX(),o=e.getDefaultAxisY(),s=h[t],n=e.addUIElement(S.Column,e.coordsRelative).setBackground((e=>e.setFillStyle(r).setStrokeStyle(d))).setMouseInteractions(!1).setVisible(!1);n.addElement(u.TextBox).setText(s.shortName),n.addElement(u.TextBox).setText(s.name).setTextFont((e=>e.setSize(10)));const l=n.addElement(u.TextBox).setText("").setTextFont((e=>e.setSize(10)));let i;return"Electrocardiogram"===s.name&&(n.addElement(u.TextBox).setMargin({top:10}).setText("BPM"),i=n.addElement(u.TextBox).setText("").setTextFont((e=>e.setSize(36)))),e.onResize((()=>{n.setVisible(!0).setPosition(e.translateCoordinate({x:a.getInterval().end,y:o.getInterval().end},e.coordsAxis,e.coordsRelative)).setOrigin(g.LeftTop).setMargin({left:10})})),{labelSampleRate:l,labelBpmValue:i}}));c(...T.map((e=>e.getDefaultAxisX())));const f=T.map(((e,t)=>{const a=h[t],o=e.addLineSeries({dataPattern:{pattern:"ProgressiveX"},automaticColorIndex:Math.max(t-1,0)}).setName(a.name).setDataCleaning({minDataPointCount:1e3});return"Electrocardiogram"===a.name&&o.setStrokeStyle((e=>e.setFillStyle(new i({color:p.examples.badGoodColorPalette[p.examples.badGoodColorPalette.length-1]})))),o}));let b=window.performance.now(),k=0;const E=()=>{const e=window.performance.now(),t=f.map((e=>[]));for(;e>b;){const e=b;for(let a=0;a<f.length;a+=1){const o=h[a],s=o.dataSet,n=s[k%s.length];t[a].push({x:e,y:n}),"Electrocardiogram"===o.name&&M(n)}b+=1,k+=1}f.forEach(((e,a)=>e.add(t[a]))),I+=t[0].length,requestAnimationFrame(E)};requestAnimationFrame(E);let I=0,B=window.performance.now();setInterval((()=>{const e=window.performance.now(),t=Math.round(1e3*I/(e-B)),a=60*C*1e3/(e-A);w.forEach(((e,o)=>{e.labelSampleRate.setText(`${t} samples / second`),e.labelBpmValue&&e.labelBpmValue.setText(`${Math.round(a)}`)})),I=0,B=e}),2e3);let A=window.performance.now(),C=0;const M=(()=>{let e=0;return t=>{e<800&&t>800&&(C+=1),e=t}})()}))}},e=>{e.O(0,[736],(()=>(138,e(e.s=138)))),e.O()}]);