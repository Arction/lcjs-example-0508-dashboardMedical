(self.webpackChunk=self.webpackChunk||[]).push([[143],{138:(e,t,o)=>{const a=o(809),{AxisScrollStrategies:s,AxisTickStrategies:n,AutoCursorModes:l,ColorHEX:r,emptyFill:i,SolidFill:d,emptyLine:c,SolidLine:m,lightningChart:S,synchronizeAxisIntervals:u,translatePoint:g,UIOrigins:y,UIElementBuilders:h,UILayoutBuilders:x,Themes:T}=a;fetch(document.head.baseURI+"examples/assets/0508/medical-data.json").then((e=>e.json())).then((e=>{const{ecg:t,bloodPressure:o,bloodVolume:a,bloodOxygenation:m}=e,T=[{shortName:"ECG/EKG",name:"Electrocardiogram",dataSet:t,color:"#00ff00",yStart:-1955,yEnd:1195},{shortName:"NIBP",name:"Blood pressure",dataSet:o,color:void 0,yStart:.475,yEnd:.795},{shortName:"BFV",name:"Blood flow volume",dataSet:a,color:void 0,yStart:.155,yEnd:.445},{shortName:"Sp02",name:"Blood oxygen saturation",dataSet:m,color:void 0,yStart:.015,yEnd:.155}],p=S().Dashboard({numberOfRows:T.length,numberOfColumns:1,disableAnimations:!0}).setRowHeight(0,.4).setRowHeight(1,.3).setRowHeight(2,.2).setRowHeight(3,.2),f=T.map(((e,t)=>{const o=p.createChartXY({rowIndex:t,columnIndex:0}).setPadding({bottom:4,top:4,right:200,left:10}).setMouseInteractions(!1).setAutoCursorMode(l.disabled),a=o.getDefaultAxisX().setMouseInteractions(!1);return o.getDefaultAxisY().setMouseInteractions(!1).setInterval(e.yStart,e.yEnd,!1,!0).setTickStrategy(n.Empty).setStrokeStyle(c),t>0?o.setTitleFillStyle(i):o.setTitle("Medical Dashboard"),t<T.length-1?a.setTickStrategy(n.Time,(e=>e.setMajorTickStyle((e=>e.setLabelFillStyle(i).setTickStyle(c).setTickLength(0).setTickPadding(0))).setMinorTickStyle((e=>e.setLabelFillStyle(i).setTickStyle(c).setTickLength(0).setTickPadding(0))))).setStrokeStyle(c).setScrollStrategy(void 0):a.setTickStrategy(n.Time).setInterval(-1e4,0).setScrollStrategy(s.progressive),o})),w=f.map(((e,t)=>{const o=e.getDefaultAxisX(),a=e.getDefaultAxisY(),s=T[t],n=e.addUIElement(x.Column).setBackground((e=>e.setFillStyle(i).setStrokeStyle(c))).setMouseInteractions(!1).dispose();n.addElement(h.TextBox).setText(s.shortName),n.addElement(h.TextBox).setText(s.name).setTextFont((e=>e.setSize(10)));const l=n.addElement(h.TextBox).setText("").setTextFont((e=>e.setSize(10)));let r;return"Electrocardiogram"===s.name&&(n.addElement(h.TextBox).setMargin({top:10}).setText("BPM"),r=n.addElement(h.TextBox).setText("").setTextFont((e=>e.setSize(36)))),requestAnimationFrame((()=>{n.restore().setPosition(g({x:o.getInterval().end,y:a.getInterval().end},{x:o,y:a},e.uiScale)).setOrigin(y.LeftTop).setMargin({left:10})})),{labelSampleRate:l,labelBpmValue:r}}));u(...f.map((e=>e.getDefaultAxisX())));const k=f.map(((e,t)=>{const o=T[t],a=e.addLineSeries({dataPattern:{pattern:"ProgressiveX"}}).setName(o.name).setDataCleaning({minDataPointCount:1e3});return o.color&&a.setStrokeStyle((e=>e.setFillStyle(new d({color:r(o.color)})))),a}));let E=window.performance.now(),b=0;const I=()=>{const e=window.performance.now(),t=k.map((e=>[]));for(;e>E;){const e=E;for(let o=0;o<k.length;o+=1){const a=T[o],s=a.dataSet,n=s[b%s.length];t[o].push({x:e,y:n}),"Electrocardiogram"===a.name&&v(n)}E+=1,b+=1}k.forEach(((e,o)=>e.add(t[o]))),B+=t[0].length,requestAnimationFrame(I)};requestAnimationFrame(I);let B=0,A=window.performance.now();setInterval((()=>{const e=window.performance.now(),t=Math.round(1e3*B/(e-A)),o=60*M*1e3/(e-F);w.forEach(((e,a)=>{e.labelSampleRate.setText(`${t} samples / second`),e.labelBpmValue&&e.labelBpmValue.setText(`${Math.round(o)}`)})),B=0,A=e}),2e3);let F=window.performance.now(),M=0;const v=(()=>{let e=0;return t=>{e<800&&t>800&&(M+=1),e=t}})()}))}},e=>{e.O(0,[736],(()=>(138,e(e.s=138)))),e.O()}]);