(self.webpackChunk=self.webpackChunk||[]).push([[524],{44:(e,t,a)=>{const o=a(89),{AxisScrollStrategies:s,AxisTickStrategies:n,AutoCursorModes:r,emptyFill:l,SolidFill:i,emptyLine:d,lightningChart:m,UIOrigins:c,UIElementBuilders:x,UILayoutBuilders:u,Themes:h}=o;fetch(new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"examples/assets/0508/medical-data.json").then((e=>e.json())).then((e=>{const{ecg:t,bloodPressure:a,bloodVolume:o,bloodOxygenation:g}=e,S=[{shortName:"ECG/EKG",name:"Electrocardiogram",dataSet:t},{shortName:"NIBP",name:"Blood pressure",dataSet:a},{shortName:"BFV",name:"Blood flow volume",dataSet:o},{shortName:"Sp02",name:"Blood oxygen saturation",dataSet:g}],p=m({resourcesBaseUrl:new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"resources/"}).ChartXY({theme:h[new URLSearchParams(window.location.search).get("theme")||"darkGold"]||void 0}).setTitle("Medical Dashboard").setMouseInteractions(!1).setAutoCursorMode(r.disabled).setPadding({right:140});p.getDefaultAxisY().dispose();const w=[p.addAxisY({iStack:3}).setLength({relative:.4}),p.addAxisY({iStack:2}).setLength({relative:.3}),p.addAxisY({iStack:1}).setLength({relative:.2}),p.addAxisY({iStack:0}).setLength({relative:.2})],T=p.getTheme(),b=p.getDefaultAxisX().setTickStrategy(n.Time).setDefaultInterval((e=>({end:e.dataMax,start:(e.dataMax??0)-1e4,stopAxisAfter:!1}))).setScrollStrategy(s.progressive),f=S.map(((e,t)=>{const a=w[t].setMouseInteractions(!1).setTickStrategy(n.Empty).setStrokeStyle(d).setAnimationScroll(!1),o=p.addPointLineAreaSeries({dataPattern:"ProgressiveX",automaticColorIndex:Math.max(t-1,0),yAxis:a}).setAreaFillStyle(l).setName(e.name).setMaxSampleCount(5e4);return"Electrocardiogram"===e.name&&o.setStrokeStyle((e=>e.setFillStyle(new i({color:T.examples.badGoodColorPalette[T.examples.badGoodColorPalette.length-1]})))),{axisY:a,series:o}})),y=f.map(((e,t)=>{const a=e.axisY,o=S[t],s=p.addUIElement(u.Column,p.coordsRelative).setBackground((e=>e.setFillStyle(l).setStrokeStyle(d))).setMouseInteractions(!1).setVisible(!1);s.addElement(x.TextBox).setText(o.shortName),s.addElement(x.TextBox).setText(o.name).setTextFont((e=>e.setSize(10)));const n=s.addElement(x.TextBox).setText("").setTextFont((e=>e.setSize(10)));let r;"Electrocardiogram"===o.name&&(s.addElement(x.TextBox).setMargin({top:10}).setText("BPM"),r=s.addElement(x.TextBox).setText("").setTextFont((e=>e.setSize(36))));const i=()=>{s.setVisible(!0).setPosition(p.translateCoordinate({x:b.getInterval().end,y:a.getInterval().end},{x:b,y:a},p.coordsRelative)).setOrigin(c.LeftTop).setMargin({left:10})};return p.onResize(i),requestAnimationFrame(i),{labelSampleRate:n,labelBpmValue:r}}));let A=window.performance.now(),B=0;const I=()=>{const e=window.performance.now(),t=f.map((e=>[]));for(;e>A;){const e=A;for(let a=0;a<f.length;a+=1){const o=S[a],s=o.dataSet,n=s[B%s.length];t[a].push({x:e,y:n}),"Electrocardiogram"===o.name&&R(n)}A+=1,B+=1}f.forEach(((e,a)=>e.series.add(t[a]))),k+=t[0].length,requestAnimationFrame(I)};requestAnimationFrame(I);let k=0,E=window.performance.now();setInterval((()=>{const e=window.performance.now(),t=Math.round(1e3*k/(e-E)),a=60*v*1e3/(e-M);y.forEach(((e,o)=>{e.labelSampleRate.setText(`${t} samples / second`),e.labelBpmValue&&e.labelBpmValue.setText(`${Math.round(a)}`)})),k=0,E=e}),2e3);let M=window.performance.now(),v=0;const R=(()=>{let e=0;return t=>{e<800&&t>800&&(v+=1),e=t}})()}))}},e=>{e.O(0,[502],(()=>(44,e(e.s=44)))),e.O()}]);